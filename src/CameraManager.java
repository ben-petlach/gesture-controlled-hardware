/**
 * Manages camera operations for computer vision applications.
 * This class handles video capture, frame processing, and hand region detection.
 * Note: The logic for computer vision was generated by AI as it's beyond the scope of this course.
 */
import org.opencv.core.*;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;
import org.opencv.highgui.HighGui;

public class CameraManager {
    private VideoCapture camera;
    private String windowName;
    private Rect handRegion;
    
    static {
        // Load the OpenCV native library
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    
    /**
     * Constructs a new CameraManager with the specified window name.
     *
     * @param windowName The name of the window where camera frames will be displayed
     */
    public CameraManager(String windowName) {
        this.windowName = windowName;
        init();
    }
    
    /**
     * Initializes the camera, display window, and sets up the hand detection region.
     * 
     * @throws RuntimeException if the camera cannot be accessed
     */
    private void init() {
        // Initialize camera
        camera = new VideoCapture(0);
        if (!camera.isOpened()) {
            throw new RuntimeException("Error: Camera not accessible");
        }
        
        // Create window
        HighGui.namedWindow(windowName);
        
        // Read one frame to get dimensions
        Mat tempFrame = new Mat();
        camera.read(tempFrame);
        int frameWidth = tempFrame.cols();
        int frameHeight = tempFrame.rows();
        
        // Define hand detection region (center-right portion of the frame)
        int roiWidth = frameWidth / 3;
        int roiHeight = frameHeight / 2;
        int roiX = frameWidth / 2;
        int roiY = frameHeight / 4;
        handRegion = new Rect(roiX, roiY, roiWidth, roiHeight);
    }
    
    /**
     * Reads a new frame from the camera and flips it horizontally.
     *
     * @return A Mat object containing the captured frame
     * @throws RuntimeException if no frame could be captured
     */
    public Mat readFrame() {
        Mat frame = new Mat();
        camera.read(frame);
        if (frame.empty()) {
            throw new RuntimeException("Error: No captured frame");
        }
        
        // Flip horizontally for more intuitive interaction
        Core.flip(frame, frame, 1);
        return frame;
    }
    
    /**
     * Displays the current frame in the window.
     *
     * @param frame The Mat object to display
     */
    public void showFrame(Mat frame) {
        HighGui.imshow(windowName, frame);
    }
    
    /**
     * Waits for a key press for the specified delay.
     *
     * @param delay Time in milliseconds to wait for a key event
     * @return The key code of the pressed key or -1 if no key was pressed
     */
    public int waitKey(int delay) {
        return HighGui.waitKey(delay) & 0xFF;
    }
    
    /**
     * Releases all resources used by this CameraManager.
     * Should be called when done using the camera.
     */
    public void release() {
        camera.release();
        HighGui.destroyAllWindows();
    }
    
    /**
     * Gets the rectangular region used for hand detection.
     *
     * @return A Rect object representing the hand detection region
     */
    public Rect getHandRegion() {
        return handRegion;
    }
}